openapi: 3.0.0
info:
  title: Jobs API
  contact: {}
  version: '1.0'
servers:
- url: https://my-jobs-api.cyclic.app/api/v1
  variables: {}
paths:
  /auth/register:
    post:
      tags:
      - Auth
      summary: user register
      operationId: userregister
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/userregisterrequest'
              - example:
                  name: kebede
                  email: kebede@gmail.com
                  password: kebede123
            example:
              name: kebede
              email: kebede@gmail.com
              password: kebede123
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
      - Auth
      summary: user login
      operationId: userlogin
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/userloginrequest'
              - example:
                  email: bamlak@gmail.com
                  password: bamlak123
            example:
              email: bamlak@gmail.com
              password: bamlak123
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []

  /jobs:
    post:
      tags:
      - Jobs
      summary: create job
      description: >-
        This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.


        A successful POST request typically returns a `200 OK` or `201 Created` response code.
      operationId: createjob
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/createjobrequest'
              - example:
                  company: GOOGLE
                  position: data scientist
            example:
              company: GOOGLE
              position: data scientist
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    get:
      tags:
      - Jobs
      summary: Get jobs of user
      description: >-
        This is a GET request and it is used to "get" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.
      operationId: Getjobsofuser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  /jobs/{id}:
    parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Job id
    
    get: 
      tags:
      - Jobs
      summary: get single job
      description: This is a get request to get a single job
      operationId: GetSinglJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    
    patch:
      tags:
      - Jobs
      summary: Update data
      description: >-
        This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).


        A successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.
      operationId: Updatedata
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdatedataRequest'
              - example:
                  company: a2sv
                  position: designer
            example:
              company: a2sv
              position: designer
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    delete:
      tags:
      - Jobs
      summary: Delete data
      description: >-
        This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).


        A successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.
      operationId: Deletedata
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
  
components:
  schemas:
    createjobrequest:
      title: createjobrequest
      required:
      - company
      - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: GOOGLE
        position: data scientist
    UpdatedataRequest:
      title: UpdatedataRequest
      required:
      - company
      - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: a2sv
        position: designer
    userloginrequest:
      title: userloginrequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: bamlak@gmail.com
        password: bamlak123
    userregisterrequest:
      title: userregisterrequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: kebede
        email: kebede@gmail.com
        password: kebede123
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:


- name: Auth
  description: ''
- name: Jobs
  description: ''